Video time: 1-9: 117 min
10-20: 77 min
21-30: 79 min

##########################################
	Chapter 0 Initialization
##########################################
Steps:
1. virtualenv --python=python.exe tweetme .
	(to install virtualenv in current dir)
2. .\Scripts\activate
3. pip install django==1.11.6
4. django-admin startproject tweetme
5. python manage.py migrate
6. python manage.py runserver
7. python manage.py createsuperuser
	(username: april, pwd: zhangfan)


#########################################
	Chapter 1 Settings
#########################################
Settings:
1. create settings folder under root dir
2. create __init__, base, local, production.py
3. paste setting.py into them
4. change debug to false in production.py
5. add one more path into base_dir
6. delete setting.py
7. edit __init__.py to import these files
(reason: we want to separate local test and production)
8. change local.py, add STATIC_ROOT
   STATIC_ROOT = os.path...,
   STATICFILES_DIRS = [...] sth copied from doc
9. create static-storage in root folder (scr), and create
   static-serve into one folder before root
9. change urls.py to serve static-serve, as in doc
(reason: put admin static files into upper folder
, and to let urls to display them. These can separate
different url files for security)

Views:
1. create views.py under settings
2. under views.py write some functions of view homepage
3. edit urlpatterns in urls.py: to map empty to home.html
4. under local.py edit TEMPLATES list, add templates 
   folder in 'DIRS' list
5. create templates folder under src root folder
6. create home.html template in templates folder

Bootstrap:
1. go to getbootstrap.com, get default html page
2. get cdn css and javascript links and change them 
   in html webpage. and comment out css original one.
(reason to use bootstrap, things would be cached, such that
the pages are loaded faster.)
3. download bootstrap
4. copy three subfolders of bootstrap into static-storage
5. create bootstrap in static-storage
6. copy three subfolders of bootstrap in this new folder
7. python manage.py collectstatic
8. in home.html file, add to head: {% load static %}
9. edit css and js lines, to be href="{% static '...' %}"


#######################################
	Chapter 2 Building Apps
#######################################
Models:
1. python manage.py startapp tweets
2. change models.py to create tweets model(database):
   class tweet(models.Model): cont = models...
3. Edit settings local.py, add it to INSTALLED_APPS
4. Everytime changes made to models, we need to do:
   python manage.py makemigrations;
   python manage.py migrate
5. Since we've added models, we need to edit admin:
   in admin.py, add: from .models import Tweet
   admin.site.register(Tweet)
   so that Tweet(db) will be displayed in admin site
6. In order to add model description, we add:
   def __str__(self): return str(self.attribute)
7. In order to relate tweets to users, we add:
   user = models.ForeignKey(settings.AUTH_USER_MODEL, default=1), and it sets any tweets related to admin

Function-based Views:
1. user actions: create, retrieve, update, delete
2. In order to create view for individual tweets, do:
   def tweet_detail_view(request):
   this is retrieve process.
3. Add file urls.py to tweets migrations
4. edit it and import views from views.py
5. edit overall urls to include tweets/urls
6. under tweets app, add folder templates. under
   folder templates, add folder tweets, and under
   it, add template html files.
7. In order to query database, in views.py we do
   from .models import Tweet, and edit functions
8. retrive by: obj = Tweet.objects.get(id=), and add 
   it to one dictionary, say context = {"": ...}, and
   add it to return function dictionary attribute
9. in list_view.html, we can now display context by
   querying {{ context.key }}, say {{ object}}

Class-based Views:
1. Use python inbuilt class to define our view class
2. class TweetDetailView(DetailView): queryset = ...
3. change urls.py to include these classes
4. add template_name in TweetDetailView class
5. default template for these classes are named as
   appname_classname.html, so we need to add them in
   templates/appname
6. There's a way to see class data by:
   def get_context_data(self): context=super(class)
7. can use inbuilt function self.kwargs.get() to 
   get url pattern.

Model Form:
1. Model Form: to let users upload information, in
   tweets app, add forms.py
2. edit admin.py to add TweetModelAdmin so that
   this new model can be modified in admin mode.
3. inside forms.py, we can add validation forms
4. otherwise, we can also modify models.py to add
   constraints on database with def clean()
5. we can also define validator functions in models
   and add validator into charField
6. Or we can put all validators into one file.

Create View:
1. define TweetCreateView function in views.py
2. edit urls.py to add createview function
3. link createview to a valid template html
4. inside createview, we can add builtin functions
   to validate user authentication or form valid,
   by using function ErrorList, forms.error...
5. We can write validation mixin, besides we can also 
   import the LoginRequiredLogin to force users to
   login. Browser can automatically redirect...

Update View:
1. update view is like a combination of createview and
   retrieve view, we can still apply updateview model
2. We do the same as createview
3. Fuck it, my update buttom never works
4. We also need to apply userloginrequiredmixin

Delete View:
1. add deleteview class in views.py
2. edit urls.py to add delete option
3. edit delete_confirm.html to enable delete function

Reverse URLs
1. We can name URLs, in settings, we set add tweet's
   namespace = 'tweet'
2. we can define get_absolute_url method in model.py
   the equivalence to success_url method

Advanced Searching:
1. to enable list view to show searching result,
   we define get_queryset function under listview
2. query = self.request.GET.get("name"), and we can
   present the filtered result in listview
3. add search_form.html to use anywhere
4. a more advanced lookup is called Q lookup, we
   can add q lookup in views.py

Template Inheritance
1. add base template, base.html in main project/src
   templates folder
2. copy base bootstrap page to base.html and change
   its title to be tweetme.co
3. change home.html to extend base.html and change
   block title to inherit super block title
4. change body tag
5. change all tweets/templates/html to inherit the
   base.html template

Bootstrap Styling
1. consult bootstrap media object to present each
   tweet in a ordered view via media object
2. concult bootstrap css for inline forms to style
   up the search form
3. enable navigation, which is crucial
4. consult bootstrap component navbar to add navbar
   customize, and shift search_form.html to navbar
5. manage tweetdetailview.html, and update list
   view based on detail view.
6. edit urls.py to show homepage as tweet home
   and update tweet urlpatterns to match
7. 