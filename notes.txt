Video time: 1-9: 117 min
10-20: 77 min
21-30: 79 min
31-40: 72 min

##########################################
	Chapter 0 Initialization
##########################################
Steps:
1. virtualenv --python=python.exe tweetme .
	(to install virtualenv in current dir)
2. .\Scripts\activate
3. pip install django==1.11.6
4. django-admin startproject tweetme
5. python manage.py migrate
6. python manage.py runserver
7. python manage.py createsuperuser
	(username: april, pwd: zhangfan)


#########################################
	Chapter 1 Settings
#########################################
Settings:
1. create settings folder under root dir
2. create __init__, base, local, production.py
3. paste setting.py into them
4. change debug to false in production.py
5. add one more path into base_dir
6. delete setting.py
7. edit __init__.py to import these files
(reason: we want to separate local test and production)
8. change local.py, add STATIC_ROOT
   STATIC_ROOT = os.path...,
   STATICFILES_DIRS = [...] sth copied from doc
9. create static-storage in root folder (scr), and create
   static-serve into one folder before root
9. change urls.py to serve static-serve, as in doc
(reason: put admin static files into upper folder
, and to let urls to display them. These can separate
different url files for security)

Views:
1. create views.py under settings
2. under views.py write some functions of view homepage
3. edit urlpatterns in urls.py: to map empty to home.html
4. under local.py edit TEMPLATES list, add templates 
   folder in 'DIRS' list
5. create templates folder under src root folder
6. create home.html template in templates folder

Bootstrap:
1. go to getbootstrap.com, get default html page
2. get cdn css and javascript links and change them 
   in html webpage. and comment out css original one.
(reason to use bootstrap, things would be cached, such that
the pages are loaded faster.)
3. download bootstrap
4. copy three subfolders of bootstrap into static-storage
5. create bootstrap in static-storage
6. copy three subfolders of bootstrap in this new folder
7. python manage.py collectstatic
8. in home.html file, add to head: {% load static %}
9. edit css and js lines, to be href="{% static '...' %}"


#######################################
	Chapter 2 Building Apps
#######################################
Models:
1. python manage.py startapp tweets
2. change models.py to create tweets model(database):
   class tweet(models.Model): cont = models...
3. Edit settings local.py, add it to INSTALLED_APPS
4. Everytime changes made to models, we need to do:
   python manage.py makemigrations;
   python manage.py migrate
5. Since we've added models, we need to edit admin:
   in admin.py, add: from .models import Tweet
   admin.site.register(Tweet)
   so that Tweet(db) will be displayed in admin site
6. In order to add model description, we add:
   def __str__(self): return str(self.attribute)
7. In order to relate tweets to users, we add:
   user = models.ForeignKey(settings.AUTH_USER_MODEL, default=1), and it sets any tweets related to admin

Function-based Views:
1. user actions: create, retrieve, update, delete
2. In order to create view for individual tweets, do:
   def tweet_detail_view(request):
   this is retrieve process.
3. Add file urls.py to tweets migrations
4. edit it and import views from views.py
5. edit overall urls to include tweets/urls
6. under tweets app, add folder templates. under
   folder templates, add folder tweets, and under
   it, add template html files.
7. In order to query database, in views.py we do
   from .models import Tweet, and edit functions
8. retrive by: obj = Tweet.objects.get(id=), and add 
   it to one dictionary, say context = {"": ...}, and
   add it to return function dictionary attribute
9. in list_view.html, we can now display context by
   querying {{ context.key }}, say {{ object}}

Class-based Views:
1. Use python inbuilt class to define our view class
2. class TweetDetailView(DetailView): queryset = ...
3. change urls.py to include these classes
4. add template_name in TweetDetailView class
5. default template for these classes are named as
   appname_classname.html, so we need to add them in
   templates/appname
6. There's a way to see class data by:
   def get_context_data(self): context=super(class)
7. can use inbuilt function self.kwargs.get() to 
   get url pattern.

Model Form:
1. Model Form: to let users upload information, in
   tweets app, add forms.py
2. edit admin.py to add TweetModelAdmin so that
   this new model can be modified in admin mode.
3. inside forms.py, we can add validation forms
4. otherwise, we can also modify models.py to add
   constraints on database with def clean()
5. we can also define validator functions in models
   and add validator into charField
6. Or we can put all validators into one file.

Create View:
1. define TweetCreateView function in views.py
2. edit urls.py to add createview function
3. link createview to a valid template html
4. inside createview, we can add builtin functions
   to validate user authentication or form valid,
   by using function ErrorList, forms.error...
5. We can write validation mixin, besides we can also 
   import the LoginRequiredLogin to force users to
   login. Browser can automatically redirect...

Update View:
1. update view is like a combination of createview and
   retrieve view, we can still apply updateview model
2. We do the same as createview
3. Fuck it, my update buttom never works
4. We also need to apply userloginrequiredmixin

Delete View:
1. add deleteview class in views.py
2. edit urls.py to add delete option
3. edit delete_confirm.html to enable delete function

Reverse URLs
1. We can name URLs, in settings, we set add tweet's
   namespace = 'tweet'
2. we can define get_absolute_url method in model.py
   the equivalence to success_url method

Advanced Searching:
1. to enable list view to show searching result,
   we define get_queryset function under listview
2. query = self.request.GET.get("name"), and we can
   present the filtered result in listview
3. add search_form.html to use anywhere
4. a more advanced lookup is called Q lookup, we
   can add q lookup in views.py

Template Inheritance
1. add base template, base.html in main project/src
   templates folder
2. copy base bootstrap page to base.html and change
   its title to be tweetme.co
3. change home.html to extend base.html and change
   block title to inherit super block title
4. change body tag
5. change all tweets/templates/html to inherit the
   base.html template

Bootstrap Styling
1. consult bootstrap media object to present each
   tweet in a ordered view via media object
2. concult bootstrap css for inline forms to style
   up the search form
3. enable navigation, which is crucial
4. consult bootstrap component navbar to add navbar
   customize, and shift search_form.html to navbar
5. manage tweetdetailview.html, and update list
   view based on detail view.
6. edit urls.py to show homepage as tweet home
   and update tweet urlpatterns to match
7. edit tweetlist to add in textarea to add tweet
8. edit tweetmodelform to overwrite content field
   to enable tweeting on homepage with textarea
9. instead of textarea, we can also use crispy
   forms to add new tweets

Django Tests
1. we can define test cases in tests.py
2. run python manage.py test to test testcases

Django Rest Framework
1. install rest, and add into INSTALLED_APPS
2. run python manage.py migrate to combine
3. under tweets folder, add folder api
4. in api folder, add __init__.py, views.py and
   serializers.py, urls.py
5. copy tweets/urls.py to api/urls.py
6. edit settings/urls.py to add api url

Django Rest Serializers
1. edit serializers.py to add modelserializer
2. edit urls to direct to api/urls
3. this api will be customized for ajax

Django User Display Serializer
1. in main project, startapp accounts
2. create folder api, and create init files
3. in serializers.py define user public disply
   serializer with name and username...
4. register app in base.py, etc...
5. import user serializer into api/serializer
5. This should enable us to view user info
   related to content in api/tweet/

Ajax
1. purpose: instead of view detail, we want 
   ajax to grab from backend and replace part
   of the data on page
2. in tweet_list.html, we add in ajax func
   which enables dynamic grab of tweets, most
   javascript functions
3. then we get rid of original python func
4. set up jquery for search module
5. set up jquery for create/update module
6. set up jquery to grab form data
7. add tweetcreateapiview to enable create
   view display change on frontend only, so
   it matches with our former setting
8. update tweetlistview to prepend new posts
   to the front of all posts

Misc jQuery functions
1. add jQuery function to append charleft
2. define keyup function to catch add char
   events and show charsleft num
3. in submit form, change logic so that tweet
   too long won't be sent to db
4. in base.html add jquery function to enable
   auto search based on timer, timeout

Load More
1. Pagination: turn into multiple pages
2. under api folder, create pagination.py
3. edit StandardResultsPagination class
   and add it into views.py
4. under tweetlistview, modify function to
   display proper result
5. add nexttweeturl var to display data.next
6. add loadmore buttom

User Profile
1. set up accounts app like tweets app
2. add userdetailview in accounts/views.py
3. add urls.py the same as tweets/urls.py
4. add path to tweetme main project urls.py
5. add user_detail.html template in accounts
6. copy tweetsdetail.html to userdetail.html
7. translate url format to contain username

Profile API
1. Update profile serializer to include
   url attribute (username)
2. in tweetlist.html add user profile link
3. edit setting/url to allow home/username

User Profile Model
1. to add followers and following
2. edit accounts/models.py add userprofile
3. display followers and followed_by in 
   user_detail.html
4. In userprofile, user.profile gives me
   the profile, while user.profile.following
   gives users I followed, user.followed_by
   gives users following me, this is how
   manytomany works
5. let's create more users and try, new
   user: fanfan, django123
6. add followers count under profile name
7. create userprofilemanager to redefine all
   method, in get_queryset, if self.instance
   which is #user itself exists, then exclude
   it and return new qs
8. update userprofile to get less following
   users, to exclude user itself

Toggle Follow
1. to enable click on buttom and follow user
2. create userfollowview class in views.py
   it enables us to follow/unfollow
3. add userfollowview into urls.py
4. add a buttom to follow/unfollow in user
   detail html

Model Manager
1. add toggle_follow method in usermanager
   to follow in database
2. add is_following method to check whether
   two users follow each other
3. in userdetailview add function to return
   is_following information
4. edit detailviewhtml to show follow or
   unfollow different buttoms
5. add function get_user_url to replace
   link in detailview html

Signals
1. When a signal come in, we want to get
   or create a user profile
2. in models.py add post_save method, which
   if a new user packet is sent in, we do
   create a new user profile in accounts in
   admin/accounts/database
3. we can test whether it works in tests.py

Add followingaccount tweets
1. in tweets/api/views.py, we filter through
   the users that we follow, and show their
   posts in particular
2. add qs2 to include my tweets
3. combine q1|qs2

HashTag
1. in tweet_list.html add jQuery to detect
   hashtag and add hashlinks to them
2. make a new app for hashtags
3. create hashtag model
4. register hashtag model in admin
4. add get hashtag method to filter and 
   get all posts related to one hashtag
5. register hashtag app in settings.py
6. copy tag_view.html as tweet_list.html
7. add hashtag url to urls.py
8. add geturl method in hashtag app

Retweet
1. 